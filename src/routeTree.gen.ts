/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ZoomRouteImport } from './routes/zoom'
import { Route as WatermarkimageRouteImport } from './routes/watermarkimage'
import { Route as WatermarkRouteImport } from './routes/watermark'
import { Route as ThumbnailRouteImport } from './routes/thumbnail'
import { Route as SmartcropRouteImport } from './routes/smartcrop'
import { Route as RotateRouteImport } from './routes/rotate'
import { Route as ResizeRouteImport } from './routes/resize'
import { Route as InfoRouteImport } from './routes/info'
import { Route as FlopRouteImport } from './routes/flop'
import { Route as FlipRouteImport } from './routes/flip'
import { Route as FitRouteImport } from './routes/fit'
import { Route as ExtractRouteImport } from './routes/extract'
import { Route as EnlargeRouteImport } from './routes/enlarge'
import { Route as CropRouteImport } from './routes/crop'
import { Route as ConvertRouteImport } from './routes/convert'
import { Route as BlurRouteImport } from './routes/blur'
import { Route as AutorotateRouteImport } from './routes/autorotate'
import { Route as IndexRouteImport } from './routes/index'

const ZoomRoute = ZoomRouteImport.update({
  id: '/zoom',
  path: '/zoom',
  getParentRoute: () => rootRouteImport,
} as any)
const WatermarkimageRoute = WatermarkimageRouteImport.update({
  id: '/watermarkimage',
  path: '/watermarkimage',
  getParentRoute: () => rootRouteImport,
} as any)
const WatermarkRoute = WatermarkRouteImport.update({
  id: '/watermark',
  path: '/watermark',
  getParentRoute: () => rootRouteImport,
} as any)
const ThumbnailRoute = ThumbnailRouteImport.update({
  id: '/thumbnail',
  path: '/thumbnail',
  getParentRoute: () => rootRouteImport,
} as any)
const SmartcropRoute = SmartcropRouteImport.update({
  id: '/smartcrop',
  path: '/smartcrop',
  getParentRoute: () => rootRouteImport,
} as any)
const RotateRoute = RotateRouteImport.update({
  id: '/rotate',
  path: '/rotate',
  getParentRoute: () => rootRouteImport,
} as any)
const ResizeRoute = ResizeRouteImport.update({
  id: '/resize',
  path: '/resize',
  getParentRoute: () => rootRouteImport,
} as any)
const InfoRoute = InfoRouteImport.update({
  id: '/info',
  path: '/info',
  getParentRoute: () => rootRouteImport,
} as any)
const FlopRoute = FlopRouteImport.update({
  id: '/flop',
  path: '/flop',
  getParentRoute: () => rootRouteImport,
} as any)
const FlipRoute = FlipRouteImport.update({
  id: '/flip',
  path: '/flip',
  getParentRoute: () => rootRouteImport,
} as any)
const FitRoute = FitRouteImport.update({
  id: '/fit',
  path: '/fit',
  getParentRoute: () => rootRouteImport,
} as any)
const ExtractRoute = ExtractRouteImport.update({
  id: '/extract',
  path: '/extract',
  getParentRoute: () => rootRouteImport,
} as any)
const EnlargeRoute = EnlargeRouteImport.update({
  id: '/enlarge',
  path: '/enlarge',
  getParentRoute: () => rootRouteImport,
} as any)
const CropRoute = CropRouteImport.update({
  id: '/crop',
  path: '/crop',
  getParentRoute: () => rootRouteImport,
} as any)
const ConvertRoute = ConvertRouteImport.update({
  id: '/convert',
  path: '/convert',
  getParentRoute: () => rootRouteImport,
} as any)
const BlurRoute = BlurRouteImport.update({
  id: '/blur',
  path: '/blur',
  getParentRoute: () => rootRouteImport,
} as any)
const AutorotateRoute = AutorotateRouteImport.update({
  id: '/autorotate',
  path: '/autorotate',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/autorotate': typeof AutorotateRoute
  '/blur': typeof BlurRoute
  '/convert': typeof ConvertRoute
  '/crop': typeof CropRoute
  '/enlarge': typeof EnlargeRoute
  '/extract': typeof ExtractRoute
  '/fit': typeof FitRoute
  '/flip': typeof FlipRoute
  '/flop': typeof FlopRoute
  '/info': typeof InfoRoute
  '/resize': typeof ResizeRoute
  '/rotate': typeof RotateRoute
  '/smartcrop': typeof SmartcropRoute
  '/thumbnail': typeof ThumbnailRoute
  '/watermark': typeof WatermarkRoute
  '/watermarkimage': typeof WatermarkimageRoute
  '/zoom': typeof ZoomRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/autorotate': typeof AutorotateRoute
  '/blur': typeof BlurRoute
  '/convert': typeof ConvertRoute
  '/crop': typeof CropRoute
  '/enlarge': typeof EnlargeRoute
  '/extract': typeof ExtractRoute
  '/fit': typeof FitRoute
  '/flip': typeof FlipRoute
  '/flop': typeof FlopRoute
  '/info': typeof InfoRoute
  '/resize': typeof ResizeRoute
  '/rotate': typeof RotateRoute
  '/smartcrop': typeof SmartcropRoute
  '/thumbnail': typeof ThumbnailRoute
  '/watermark': typeof WatermarkRoute
  '/watermarkimage': typeof WatermarkimageRoute
  '/zoom': typeof ZoomRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/autorotate': typeof AutorotateRoute
  '/blur': typeof BlurRoute
  '/convert': typeof ConvertRoute
  '/crop': typeof CropRoute
  '/enlarge': typeof EnlargeRoute
  '/extract': typeof ExtractRoute
  '/fit': typeof FitRoute
  '/flip': typeof FlipRoute
  '/flop': typeof FlopRoute
  '/info': typeof InfoRoute
  '/resize': typeof ResizeRoute
  '/rotate': typeof RotateRoute
  '/smartcrop': typeof SmartcropRoute
  '/thumbnail': typeof ThumbnailRoute
  '/watermark': typeof WatermarkRoute
  '/watermarkimage': typeof WatermarkimageRoute
  '/zoom': typeof ZoomRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/autorotate'
    | '/blur'
    | '/convert'
    | '/crop'
    | '/enlarge'
    | '/extract'
    | '/fit'
    | '/flip'
    | '/flop'
    | '/info'
    | '/resize'
    | '/rotate'
    | '/smartcrop'
    | '/thumbnail'
    | '/watermark'
    | '/watermarkimage'
    | '/zoom'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/autorotate'
    | '/blur'
    | '/convert'
    | '/crop'
    | '/enlarge'
    | '/extract'
    | '/fit'
    | '/flip'
    | '/flop'
    | '/info'
    | '/resize'
    | '/rotate'
    | '/smartcrop'
    | '/thumbnail'
    | '/watermark'
    | '/watermarkimage'
    | '/zoom'
  id:
    | '__root__'
    | '/'
    | '/autorotate'
    | '/blur'
    | '/convert'
    | '/crop'
    | '/enlarge'
    | '/extract'
    | '/fit'
    | '/flip'
    | '/flop'
    | '/info'
    | '/resize'
    | '/rotate'
    | '/smartcrop'
    | '/thumbnail'
    | '/watermark'
    | '/watermarkimage'
    | '/zoom'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AutorotateRoute: typeof AutorotateRoute
  BlurRoute: typeof BlurRoute
  ConvertRoute: typeof ConvertRoute
  CropRoute: typeof CropRoute
  EnlargeRoute: typeof EnlargeRoute
  ExtractRoute: typeof ExtractRoute
  FitRoute: typeof FitRoute
  FlipRoute: typeof FlipRoute
  FlopRoute: typeof FlopRoute
  InfoRoute: typeof InfoRoute
  ResizeRoute: typeof ResizeRoute
  RotateRoute: typeof RotateRoute
  SmartcropRoute: typeof SmartcropRoute
  ThumbnailRoute: typeof ThumbnailRoute
  WatermarkRoute: typeof WatermarkRoute
  WatermarkimageRoute: typeof WatermarkimageRoute
  ZoomRoute: typeof ZoomRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/zoom': {
      id: '/zoom'
      path: '/zoom'
      fullPath: '/zoom'
      preLoaderRoute: typeof ZoomRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/watermarkimage': {
      id: '/watermarkimage'
      path: '/watermarkimage'
      fullPath: '/watermarkimage'
      preLoaderRoute: typeof WatermarkimageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/watermark': {
      id: '/watermark'
      path: '/watermark'
      fullPath: '/watermark'
      preLoaderRoute: typeof WatermarkRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/thumbnail': {
      id: '/thumbnail'
      path: '/thumbnail'
      fullPath: '/thumbnail'
      preLoaderRoute: typeof ThumbnailRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/smartcrop': {
      id: '/smartcrop'
      path: '/smartcrop'
      fullPath: '/smartcrop'
      preLoaderRoute: typeof SmartcropRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rotate': {
      id: '/rotate'
      path: '/rotate'
      fullPath: '/rotate'
      preLoaderRoute: typeof RotateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resize': {
      id: '/resize'
      path: '/resize'
      fullPath: '/resize'
      preLoaderRoute: typeof ResizeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/info': {
      id: '/info'
      path: '/info'
      fullPath: '/info'
      preLoaderRoute: typeof InfoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/flop': {
      id: '/flop'
      path: '/flop'
      fullPath: '/flop'
      preLoaderRoute: typeof FlopRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/flip': {
      id: '/flip'
      path: '/flip'
      fullPath: '/flip'
      preLoaderRoute: typeof FlipRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/fit': {
      id: '/fit'
      path: '/fit'
      fullPath: '/fit'
      preLoaderRoute: typeof FitRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/extract': {
      id: '/extract'
      path: '/extract'
      fullPath: '/extract'
      preLoaderRoute: typeof ExtractRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/enlarge': {
      id: '/enlarge'
      path: '/enlarge'
      fullPath: '/enlarge'
      preLoaderRoute: typeof EnlargeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/crop': {
      id: '/crop'
      path: '/crop'
      fullPath: '/crop'
      preLoaderRoute: typeof CropRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/convert': {
      id: '/convert'
      path: '/convert'
      fullPath: '/convert'
      preLoaderRoute: typeof ConvertRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blur': {
      id: '/blur'
      path: '/blur'
      fullPath: '/blur'
      preLoaderRoute: typeof BlurRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/autorotate': {
      id: '/autorotate'
      path: '/autorotate'
      fullPath: '/autorotate'
      preLoaderRoute: typeof AutorotateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AutorotateRoute: AutorotateRoute,
  BlurRoute: BlurRoute,
  ConvertRoute: ConvertRoute,
  CropRoute: CropRoute,
  EnlargeRoute: EnlargeRoute,
  ExtractRoute: ExtractRoute,
  FitRoute: FitRoute,
  FlipRoute: FlipRoute,
  FlopRoute: FlopRoute,
  InfoRoute: InfoRoute,
  ResizeRoute: ResizeRoute,
  RotateRoute: RotateRoute,
  SmartcropRoute: SmartcropRoute,
  ThumbnailRoute: ThumbnailRoute,
  WatermarkRoute: WatermarkRoute,
  WatermarkimageRoute: WatermarkimageRoute,
  ZoomRoute: ZoomRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
